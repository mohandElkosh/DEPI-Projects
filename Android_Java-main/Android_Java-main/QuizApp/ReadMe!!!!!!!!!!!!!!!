This Android quiz app is designed to provide an interactive way for users to test their knowledge on various countries and their capitals. Users can start a quiz,
answer questions, and view their scores. The app also tracks player statistics and allows sorting and filtering of player data.

Features:
-Quiz Functionality: Users can start a quiz that presents multiple-choice questions about country capitals.
-Player Management: Users can add their names and play multiple turns. The app tracks their scores and limits the number of turns.
-Score Tracking: Scores are recorded, and players can view their results.
-Statistics: Players can view and sort statistics based on scores and names.
-UI/UX Enhancements: Includes feedback on player performance and a responsive layout.

Android Components:
-Activities and Intents: Managing multiple activities and passing data between them.
-SharedPreferences: Storing and retrieving player data and high scores.
-MediaPlayer: Playing audio feedback based on quiz results.

Data Management:
-Serializable Interface: Using Serializable to pass complex data (e.g., Player objects) between activities.
-ArrayLists and Collections: Handling and manipulating lists of data, including shuffling and filtering.

User Interface Design:
-Dynamic UI Updates: Modifying UI elements (e.g., TextView, Spinner) based on user interaction and quiz progress.
-Adapters and View Binding: Creating custom adapters for displaying player data in a ListView.

Event Handling:
-Button and Spinner Listeners: Handling user interactions to start the quiz, move to the next question, and display statistics.

Error Handling and Validation:
-Input Validation: Ensuring users provide valid input before proceeding.
-Exception Handling: Gracefully handling potential issues like null data and empty responses.

Technologies Used:
-Android SDK: For building the Android app and managing UI components.
-Java: The programming language used for implementing the app logic.
-XML: For designing the layout files.
-MediaPlayer API: For playing success and failure sounds.
-SharedPreferences: For persistent storage of player data.
-ArrayAdapter: For binding data to UI components.

Code Overview:
-MainActivity: Handles quiz logic, question management, and user interactions.
-PlayerActivity: Manages player data, including adding new players and displaying statistics.
-StatActivity: Displays player statistics and allows sorting and filtering.
-Player Class: Represents a player, including their name, score, and turns.
-Future Improvements
-Enhanced User Interface: Improve the user experience with more interactive UI elements and animations.
-Database Integration: Use a database (e.g., SQLite) for persistent storage of player and quiz data.
-More Question Categories: Expand the quiz to include various categories beyond country capitals.
